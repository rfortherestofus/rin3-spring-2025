---
title: R in 3 Months Week 2 (Data Wrangling and Analysis)
format:
  rfortherestofus-slides-revealjs:
    menu: false
    progress: true
    slide-number: true
    show-slide-number: print
    center: true
    incremental: true
    auto-animate: true
execute: 
  message: false
  warning: false
  cache: false
  eval: false
  echo: true
title-slide-attributes:
  data-background-image: assets/rru-hex-bg-gradient-dark.svg
  data-background-size: cover
editor_options: 
  chunk_output_type: console
---

```{r}
#| echo: false
library(palmerpenguins)
library(tidyverse)
library(janitor)
library(tidycensus)
```

## What is the most surprising thing about R so far?

Please put your answer in the chat!

# Agenda

1. Housekeeping

1. Review of `dplyr` Functions

1. Common Issues and Your Questions

1. Weekly Coach Tips

1. Next Week

::: {.notes}
http://rin3fall2024.rfortherestofus.com/slides/slides-week-02.html
:::

# Housekeeping {.inverse}

## Any Issues with the Website? {.inverse}

## Project Assignments

- If you submitted a project assignment, you should receive an email notification when Gracielle gives you feedback

- Gracielle can answer questions relevant to the topic of the week, but can't answer everything for you

- Instead, she will share resources with you where applicable

## Datasets

- Check in with Gracielle about a good dataset to use!

- [rin3-datasets repo](https://github.com/rfortherestofus/rin3-datasets)

## Co-Working Session {.inverse}

# Review of Functions {.inverse}

::: {.notes}
- Does this mean it‚Äôs possible to import a ready made code/Rscript file, maybe customize it to fit a particular dataset & operations?‚Ä¶ ü§©I‚Äôm totally loving this

- Show obtn cleaning
:::

# Cheatsheets

[Download them for yourself!](https://github.com/rfortherestofus/rin3-fall-2024/blob/main/misc/beginner-cheatsheets.pdf)

# `select()` {.inverse}

# {background-video="assets/09_select.mp4" background-video-loop="true" background-size="contain"}

# `mutate()` {.inverse}

# {background-video="assets/04_mutate.mp4" background-video-loop="true" background-size="contain"}

# `filter()` {.inverse}

# {background-video="assets/01_filter_1.mp4" background-video-loop="true" background-size="contain"}

# `summarize()` {.inverse}

# {background-video="assets/05_summarise.mp4" background-video-loop="true" background-size="contain"}

# `group_by() |> summarize()` {.inverse}

# {background-video="assets/06_summarise_grouped.mp4" background-video-loop="true" background-size="contain"}

# `arrange()` {.inverse}

# {background-video="assets/03_arrange.mp4" background-video-loop="true" background-size="contain"}

# Common Issues and Your Questions {.inverse}

## Packages

. . .

**Install** packages once per **computer**

. . .

```{r}
#| eval: false
install.packages("tidyverse")
```

. . .

<br>
**Load** packages once per **session**

. . .

```{r}
#| eval: false
library(tidyverse)
```

## Packages

Can you set up R to always load certain packages?

## Function conflicts

- You've seen this with the `tidyverse` loading message

- It can happen with other packages

- Only load packages you need to use 

- You can also use `package::function()` syntax (e.g. `dplyr::summarize()`)

::: {.notes}
https://rfortherestofus.com/courses/fundamentals/lessons/summarize-v2#comment-34375
:::

## Working directories

- RStudio projects set your working directory to be the root of the project (i.e. where you find the `.Rproj` file)

- Using a project, you only need to use **relative** file paths, not **absolute** file paths

- This is easier to type and more reproducible

## Keyboard shortcut to run code

- command + enter (Mac) or control + enter (Windows)

## Difference between native pipe and tidyverse pipe

> Why is there a new native pipe in R, and what is the reason we are using the new native pipe vs. the tidyverse pipe in this course? I currently use the tidyverse pipe in my day-to-day work, so am just curious about whether I should be thinking about switching which pipe I use in that context, too.

## What is the ideal maximum pipeline length?

> Are there any widely accepted "best practices" around pipeline length? In the penguins example for arrange(), there were ~ 5 functions tied together in the pipeline. I can see the efficiency of this in that you only have to call penguins |> one time to implement all of those functions -- however, I personally tend to feel more comfortable implementing code in smaller chunks so I can label exactly what each piece is doing, especially if my code will be shared with others. 

## What is the ideal maximum pipeline length?

> Your pipes are longer than (say) ten steps. In that case, create intermediate objects with meaningful names. That will make debugging easier, because you can more easily check the intermediate results, and it makes it easier to understand your code, because the variable names can help communicate intent.

::: {.small}
Source: [R for Data Science, 1st Edition](https://arc.net/l/quote/llsbqlfp)
:::

::: {.notes}
One caveat is that when get your data into tidy format, you will need to do less piping afterwards
:::

## When is data real?

> I would like you to help me confirm that once an Object appears in the Environment Panel, it's automatically saved. In this case our object is the `penguins_data`.

. . .

![](assets/where-does-data-live.png)

::: {.notes}
You will later change your settings so that you only have objects when you run code to create them
:::

## When is data real?

![](https://rstats.wtf/img/if-you-liked-it-you-should-have-saved-the-source-for-it.jpg)

::: {.small}
Source: [rstats.wtf](https://rstats.wtf/source-and-blank-slates)
:::

::: {.notes}
https://rfortherestofus.com/courses/r-in-3-months-fall-2024/lessons/an-important-workflow-tip-v2
:::

## Always save your R script files {.inverse}

## Parentheses matter (a lot!)

What's the logic for the "-" (minus) in the second solution below being in its own parenthesis but it's not in the first solution? That tripped me up.

```{r}
penguins |>
  select(-species)
```

. . .

```{r}
penguins |>
  select(-(bill_length_mm:body_mass_g))
```


## Parentheses matter (a lot!)

> When I run the `read_csv()` code again to deal with the -999 values, it does not completely work. 

. . .

> Looking at the data using `view(penguins_data)`, I still have some -999 values in case 4, as well as some -999.0 values in case 4. 

## Parentheses matter (a lot!)

> I have adapted the code to read `read_csv("penguins_data.csv", na = "-999, -999.0")` to deal with the ones with the decimal point and the zero, but even after that there are still these issues, including in sex_v2

. . .

> I can see that in sex there are some `NA` values now, which means the code has partially worked, I guess. 

## How R handles NA values

- SPSS has named NA values

- In R, a value is only NA if it shows up in red (in the console) or light gray (in Quarto)

## How R handles NA values

You'll learn later to use functions from the `tidyr` package to deal with missing values:

- `replace_na()` will replace existing `NA` values with your chosen values

- `na_if()` will replace values you specify with `NA`

## NA values

> Is there some way to change the default behavior of summarize so that it ignores NAs without having to specify it specifically? I didn't know if there was something like a global variable that you can set in the R script file, or something within the RStudio environment or installed package?

::: {.notes}
Don't want to make your code not reproducible

Gracielle: Yes! It‚Äôs common that people just drop the NAs and sometimes they are actually important 0s. I see that all the time on species occurrence data, where NAs are often used interchangeably for ‚Äúwe didn‚Äôt sample there‚Äù and ‚Äúwe sampled there but no species were found‚Äù.

Libby: Are we missing a lot of values for "income" in our survey? Why? Which demographics are most likely to having missing income values? If we drop all these rows, are we now excluding a whole population group simply because they're less likely to disclose income on a survey?
:::

## Quotes

## Needed to refer to non-existent things

```{r}
#| eval: false
#| echo: true
install.packages("tidyverse")
```

## Not needed to refer to existing things 

::: {.fragment}
```{r}
#| eval: false
#| echo: true
library(tidyverse)
```
:::

<br>

::: {.fragment}
```{r}
#| eval: false
#| echo: true
penguins |>
  select(island)
```
:::

## Needed when you're referring to text

```{r}
#| eval: false
#| echo: true
penguins |>
  filter(island == "Torgersen")
```

## Or the name of a file

```{r}
#| eval: false
#| echo: true
penguins <- read_csv(file = "data-raw/penguins.csv")
```


## %in% operator

> I‚Äôm wondering if you know why one needs to concatenate multiple observations in the filter function. For example, here‚Äôs a correct use of filter:

```{r}
#| eval: false
#| echo: true
penguins |>
  filter(island %in% c("Torgersen", "Biscoe"))
```

## %in% operator

> From what I understand of the concatenate function (from Excel), wouldn‚Äôt that basically mean R is looking at each observation in island and seeing if that observation can be found anywhere inside "TorgersenBiscoe"? But when I try it without concatenating by doing this:

```{r}
#| eval: false
#| echo: true
penguins |>
  filter(island %in% c("TorgersenBiscoe"))
```

> I get an error message. Maybe the answer is "That‚Äôs just how R works," but I‚Äôm trying to build a solid mental model for these functions, so if there‚Äôs anything more to it, I‚Äôd love to better understand. Thanks!



# Typos happen to everone

![](assets/david-asking-for-help.png)

# Typos happen to everone

::: {.large}
```{r}
#| eval: false
#| echo: true

get_acs(
  year = 2019,
  geography = "county",
  geometry = TRUE,
  state = "OR",
  variables = "B01003_001"
) %>%
  clean_names() %>%
  mutate(name = str_remove(name, " County")) %>%
  rename(
    poulation = estimate,
    county = name
  ) %>%
  select(county, population)
```
:::

# Weekly coach tips

1. Do **not** use generative AI!

1. Don't be afraid to submit your assignments.


# Next Week

1. Course assignment: complete data viz lessons

1. Project assignment: make three plots from your data

